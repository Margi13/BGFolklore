@using BGFolklore.Models.Calendar.ViewModels
@using BGFolklore.Common.Nomenclatures
@using BGFolklore.Web.Controllers
@using BGFolklore.Web.Common;
@using Microsoft.Extensions.Localization;
@using BGFolklore.Data.Models;
@using Microsoft.AspNetCore.Identity;
@using System.Text.Json;

@inject UserManager<User> userManager

@inject IStringLocalizer<CalendarController> localizer

@model RecurringEventViewModel
@{
    var modelJson = Json.Serialize(Model).ToString();
    var userIdJson = Json.Serialize(userManager.GetUserId(User)).ToString();
    var hasNewFeeds = false;
    foreach (var feed in Model.Feedbacks)
    {
        if (feed.StatusId == (int)StatusName.New)
        {
            hasNewFeeds = true;
            break;
        }
    }
}
<tr class="event-row" title="Виж допълнителна информация за това събитие" onclick="eventRowOnClick(@modelJson, @userIdJson)">
    <td class="no-stilization stop-parent-onclick pr-1">
        @if (Model.Feedbacks.Count != 0)
        {
            <button type="button" onclick="location.href='@Url.Action("EventFeedbacks", "Calendar", Model)'"
                    class="btn bg-light rounded-circle @(hasNewFeeds ? "text-danger" : "")"
                    title="Има @Model.Feedbacks.Count @((Model.Feedbacks.Count == 1) ? "подаден сигнал" : "подадени сигнала") за грешна информация">
                <i class="fas fa-exclamation pulseIcon"></i>
            </button>
        }
    </td>
    <td>@Towns.AllTowns.OrderBy(t => t.Id).ToArray()[Model.TownId - 1].Name</td>
    <td>@localizer[$"PlaceType{Model.PlaceType}"]</td>
    <td>
        @if (Model.Name.Length > 80)
        {
            <div>@(Model.Name.Substring(0, 80)+"...")</div>
        }
        else
        {
            <div>@Model.Name </div>
        }
    </td>
    <td>
        @foreach (int item in Enum.GetValues(typeof(DaysOfWeek)))
        {
            @if ((Model.OccuringDays & item) == item)
            {
                <div>
                    @localizer[$"Day{(((DaysOfWeek)item).ToString())}"]
                </div>
            }
        }
    </td>
    <td>@Model.EventDateTime.TimeOfDay</td>
    <td>
        @* В мапер *@
        @foreach (int item in Enum.GetValues(typeof(AttendeeType)))
        {
            @if ((Model.IntendedFor & item) == item)
            {
                <div>
                    @localizer[$"AttendeeType{(((AttendeeType)item).ToString())}"]
                </div>
            }
        }
    </td>

    <td class="table-col-w-15">
        <div class="rating-container">
            @for (int i = 1; i <= @Model.Rating; i++)
            {
                <i class="fas fa-star"></i>
            }
            @for (int i = 5; i > @Model.Rating; i--)
            {
                @if (@Model.Rating > (Math.Floor(@Model.Rating) + 0.5) && i == 5)
                {
                    <i class="fas fa-star"></i>
                    i--;
                }
                <i class="far fa-star"></i>
            }
            @Model.Rating
        </div>
    </td>

    <td class="stop-parent-onclick table-col-w-10">
        @if (Model.OwnerId.Equals(userManager.GetUserId(User)))
        {
            <div class="d-flex justify-content-start">
                <a asp-action="EditEvent" asp-route-eventId="@Model.Id"
                        class="btn bg-light rounded-circle"
                        title="Редактиране на информацията за събитието.">
                    <i class="fas fa-edit font"></i>
                </a>
                <a asp-action="DeleteEvent" asp-route-eventId="@Model.Id"
                        class="btn bg-light rounded-circle"
                        title="Изтриване на събитието.">
                    <i class="fas fa-trash-alt"></i>
                </a>
            </div>
        }
    </td>
</tr>